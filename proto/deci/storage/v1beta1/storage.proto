syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

package deci.storage.v1beta1;
option go_package = "storage";

// Keys hold encryption and signing keys.
message Keys {
  // Key for creating and verifying signatures. These may be nil. They are
  // store a JWK JSON Blobs
  bytes SigningKey = 1 [ json_name = "signing_key" ];
  bytes SigningKeyPub = 2 [ json_name = "signing_key_pub" ];

  // Old signing keys which have been rotated but can still be used to validate
  // existing signatures.
  repeated VerificationKey verification_keys = 3
      [ json_name = "verification_keys" ];

  // The next time the signing key will rotate.
  //
  // For caching purposes, implementations MUST NOT update keys before this
  // time.
  google.protobuf.Timestamp next_rotation = 4 [ json_name = "next_rotation" ];
}

// VerificationKey is a rotated signing key which can still be used to verify
// signatures.
message VerificationKey {
  // Stored as JWK JSON blob
  bytes public_key = 1 [ json_name = "public_key" ];
  google.protobuf.Timestamp expiry = 2 [ json_name = "expiry" ];
}

// Claims represents the ID Token claims supported by the server.
message Claims {
  string user_id = 1;
  string username = 2;
  string email = 3;
  bool email_verified = 4;
  repeated string groups = 5;
  google.protobuf.StringValue acr = 6;
  repeated string amr = 7;
}

// AuthRequest represents a OAuth2 client authorization request. It holds the
// state of a single auth flow up to the point that the user authorizes the
// client.

message AuthRequest {
  // ID used to identify the authorization request.
  string id = 1;
  // ID of the client requesting authorization from a user.
  string client_id = 2;

  // Values parsed from the initial request. These describe the resources the
  // client is
  // requesting as well as values describing the form of the response.
  repeated string response_types = 3;
  repeated string scopes = 4;
  string redirect_uri = 5;
  string nonce = 6;
  string state = 7;

  // OPTIONAL. Requested Authentication Context Class Reference values.
  // Space-separated string that specifies the acr values that the Authorization
  // Server is being requested to use for processing this Authentication
  // Request, with the values appearing in order of preference.
  // https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
  repeated string acr_values = 14;

  // The client has indicated that the end user must be shown an approval prompt
  // on all requests. The server cannot cache their initial action for
  // subsequent attempts.
  bool force_approval_prompt = 8;

  google.protobuf.Timestamp expiry = 9;
  // Has the user proved their identity through a backing identity provider?
  //
  // If false, the following fields are invalid.
  bool loggedIn = 10;

  // The identity of the end user. Generally nil until the user authenticates
  // with a backend.
  Claims claims = 11;

  // The connector used to login the user and any data the connector wishes to
  // persists. Set when the user authenticates.
  string connector_id = 12;
  // arbitrary connector data. Usually JSON blob
  bytes connector_data = 13;
}

// AuthCode represents a code which can be exchanged for an OAuth2 token
// response.
//
// This value is created once an end user has authorized a client, the server
// has redirect the end user back to the client, but the client hasn't exchanged
// the code for an access_token and id_token.
message AuthCode {
  // Actual string returned as the "code" value.
  string id = 1;
  // The client this code value is valid for. When exchanging the code for a
  // token response, the client must use its client_secret to authenticate.
  string client_id = 2;
  // As part of the OAuth2 spec when a client makes a token request it MUST
  // present the same redirect_uri as the initial redirect. This values is saved
  // to make this check.
  //
  // https://tools.ietf.org/html/rfc6749#section-4.1.3
  string redirect_uri = 3;
  // If provided by the client in the initial request, the provider MUST create
  // a ID Token with this nonce in the JWT payload.
  string nonce = 4;
  // Scopes authorized by the end user for the client.
  repeated string scopes = 5;

  // Authentication data provided by an upstream source.
  string connector_id = 6;
  bytes connector_data = 7;
  Claims claims = 8;

  google.protobuf.Timestamp expiry = 9;
}

// RefreshToken is an OAuth2 refresh token which allows a client to request new
// tokens on the end user's behalf.
message RefreshToken {
  string id = 1;

  // A single token that's rotated every time the refresh token is refreshed.
  //
  // May be empty.
  string token = 2;

  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp last_used = 4;

  // Client this refresh token is valid for.
  string client_id = 5;

  // Authentication data provided by an upstream source.
  string connector_id = 6;
  bytes connector_data = 7;
  Claims claims = 8;

  // Scopes present in the initial request. Refresh requests may specify a set
  // of scopes different from the initial request when refreshing a token,
  // however those scopes must be encompassed by this set.
  repeated string scopes = 9;

  // Nonce value supplied during the initial redirect. This is required to be
  // part of the claims of any future id_token generated by the client.
  string nonce = 10;
}

// RefreshTokenRef is a reference object that contains metadata about refresh
// tokens.

message RefreshTokenRef {
  string id = 1;
  // Client the refresh token is valid for.
  string client_id = 2;

  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp last_used = 4;
}

// OfflineSessions objects are sessions pertaining to users with refresh tokens.
message OfflineSessions {
  // UserID of an end user who has logged in to the server.
  string user_id = 1;
  // The ID of the connector used to login the user.
  string conn_id = 2;
  // Refresh is a hash table of refresh token reference objects
  // indexed by the ClientID of the refresh token.
  map<string, RefreshTokenRef> refresh = 3;
}
